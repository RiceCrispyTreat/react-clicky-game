{"version":3,"sources":["imageNames.js","components/navbar/navbar.js","components/imageBlock/imageBlock.js","components/ImageListing/imageListing.js","App.js","serviceWorker.js","index.js"],"names":["ImageNames","Navbar","props","className","href","id","gameStatus","feedback","score","topScore","ImageBlock","src","process","imageFileName","alt","height","imageBlockHeight","width","imageBlockWidth","onClick","clickHandler","ImageListing","map","ImageName","index","key","App","state","imageNames","clickedImages","this","setState","shuffle","console","log","e","clickedImageName","target","imageClickedBefore","newScore","length","clickedImagesCopy","slice","push","newTopScore","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","handleClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5c4fd27.chunk.js","sourcesContent":["let ImageNames = [\"april.jpg\", \"bebop.png\", \"casey.jpg\", \"donatello.png\", \"group.jpg\", \"krang.jpg\", \"leonardo.jpg\", \"mikey.png\", \"pizzatime.jpg\", \"raph.jpg\", \"Rocksteady.png\", \"shredder-spilnter.jpg\", \"shredder.png\", \"splinter.jpg\"];\r\n\r\nexport default ImageNames;","import React from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nconst Navbar = props => (\r\n    <div className=\"bg-dark navbar-dark container-fluid text-center pt-1 pb-1\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <h2><a href=\".\" className=\"text-white nounderline\" id=\"app-name\"> Cowabunga Clicky Game!!</a></h2>\r\n        </div>\r\n        <div className={\"col-md-4 \" + (props.gameStatus === \"2\" ? \" text-danger\" : (props.gameStatus === \"1\" ? \" text-success\" : \" text-info\"))}>\r\n          <h3>{props.feedback}</h3>\r\n        </div>\r\n        <div className=\"col-md-4 text-muted\">\r\n          \r\n    \r\n          <h3>Score: {props.score} | Top Score: {props.topScore}</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n);\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./imageBlock.css\";\r\n\r\nconst ImageBlock = (props) => (\r\n  <img className={\"col-md-3 col-sm-4 col-xs-12 pb-4 imageBlock rounded-circle \" + (props.gameStatus === \"2\" ? \" gameLost\" : (props.gameStatus === \"1\" ? \" gameWon\" : \"\"))} src={process.env.PUBLIC_URL + \"/images/\" + props.imageFileName} alt={props.alt} height={props.imageBlockHeight} width={props.imageBlockWidth} onClick={props.clickHandler} />\r\n);\r\n\r\nexport default ImageBlock;","import React from \"react\";\r\nimport \"./imageListing.css\";\r\nimport ImageBlock from \"../imageBlock\";\r\n\r\nconst ImageListing = (props) => (\r\n\t<div className=\"container\">\r\n\t\t<div className=\"row\">\r\n\t    {props.ImageNames.map((ImageName, index) => {\r\n\t      return <ImageBlock key={index} imageFileName={ImageName} alt={ImageName} clickHandler={props.clickHandler} gameStatus={props.gameStatus} />\r\n\t    })}\r\n\t  </div>\r\n  </div>\r\n);\r\n\r\nexport default ImageListing;\r\n","import React, { Component } from \"react\";\nimport ImageNames from \"./imageNames\";\nimport Navbar from \"./components/navbar\";\nimport ImageListing from \"./components/ImageListing\";\n\nclass App extends Component {\n  state = {\n    imageNames: ImageNames,\n    clickedImages: [],\n    score: 0,\n    topScore: 0,\n    feedback: \"Click an image to start!\",\n    gameStatus: 0\n  };\n\n  componentDidMount() {\n    this.setState(\n      {\n        imageNames: this.shuffle(this.state.imageNames)\n      },\n      () => {\n        console.log(\"Shuffled the images on game start\");\n      }\n    );\n  }\n\n  handleClick(e) {\n    const clickedImageName = e.target.alt;\n\n    const wasImageClickedBefore = this.imageClickedBefore(clickedImageName);\n    if (wasImageClickedBefore) {\n      this.setState(\n        {\n          imageNames: this.shuffle(this.state.imageNames),\n\n          clickedImages: [],\n          score: 0,\n          feedback: \"Game Over! You Guessed The Same Image Twice!\",\n          gameStatus: 2\n        },\n        () => {}\n      );\n    } else {\n      let newScore = this.state.score + 1;\n      if (newScore === this.state.imageNames.length) {\n        this.setState({\n          imageNames: this.shuffle(this.state.imageNames),\n\n          clickedImages: [],\n          score: 0,\n          topScore: newScore,\n          feedback: \"Cowabunga! You Have Guessed All Of The Images Correctly!\",\n          gameStatus: 1\n        });\n      } else {\n        const clickedImagesCopy = this.state.clickedImages.slice();\n        clickedImagesCopy.push(clickedImageName);\n        const newTopScore =\n          newScore > this.state.topScore ? newScore : this.state.topScore;\n        this.setState(\n          {\n            ImageNames: this.shuffle(this.state.imageNames),\n\n            clickedImages: clickedImagesCopy,\n            score: newScore,\n            topScore: newTopScore,\n            feedback: \"Yes! You Guessed The Image Correctly!\",\n            gameStatus: 0\n          },\n          () => {}\n        );\n      }\n    }\n  }\n\n  imageClickedBefore(clickedImageName) {\n    for (let index = 0; index < this.state.clickedImages.length; index++) {\n      if (this.state.clickedImages[index] === clickedImageName) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  shuffle(array) {\n    let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          feedback={this.state.feedback}\n          gameStatus={this.state.gameStatus}\n        />\n        {/* <Banner /> */}\n        <ImageListing\n          ImageNames={this.state.imageNames}\n          clickHandler={(e) => this.handleClick(e)}\n          gameStatus={this.state.gameStatus}\n        />\n        {/* <Footer /> */}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}